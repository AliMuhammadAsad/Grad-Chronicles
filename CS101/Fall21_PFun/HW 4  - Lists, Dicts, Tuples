#Qns 1 - Dude Where's My Chair? - Takes a form of crossword with a new line shown by '\n' and returns nested lists, each list contains a letter, its position as row and column
def crossword_positions(puzzle):
    lst, rows, column = [], 0, 0
    for x in puzzle:
        if x == '\n':
            rows += 1
            column = 0
        else:
            temp_lst = []
            temp_lst.append(x), temp_lst.append(rows), temp_lst.append(column)
            lst.append(temp_lst)
            column += 1
    return lst

--------------------------------------------------------------------------------------------------------------------------------------------------------

#Qns 2 - Anagrams - takes 2 strings and checks whether they are anagrams or not without using sorted function
def listing(word): #makes a list containing each element in the string to compare with the other one
    lst = []
    for x in word:
        lst.append(x)
    return lst
def remove_spaces(lst): #removes the spaces from previously created list to only get the letters
    if ' ' in lst:
        lst.remove(' ')
        remove_spaces(lst)
    else:
        return lst

def are_anagrams(word1, word2):
    word1, word2 = word1.lower(), word2.lower()
    lst1, lst2 = listing(word1), listing(word2)
    remove_spaces(lst1), remove_spaces(lst2)
    lst1.sort(),lst2.sort()
    if lst1 == lst2:
        return True
    else:
        return False
        
--------------------------------------------------------------------------------------------------------------------------------------------------------

#Qns 3 - The Power of a Set - takes a list L and returns all of its sub sets
def genPower(L):
    # sets = [[]]
    # for x in L:
    #     for y in sets:
    #         sets = sets +  [list(y) + [x]]
    #         # sets.append(list(y) + [x])
    # return sets

--------------------------------------------------------------------------------------------------------------------------------------------------------

#Qns 4 - NestedList2Dictionary - takes nested lists and returns a dictionary with first value of sublist as key and remaining as values - handles same keys
def nestedList2Dictionary(L):
    d = {}
    for x in range(len(L)):
        k, vals = L[x][0], [L[x][1], L[x][2]]
        if k in d:
            # return("key exists")
            val = d.get(k)
            for x in vals:
                val.append(x)
            temp_d = {k: val}
            d.update(temp_d) 
        else:
            temp_d = {k: vals}
            d.update(temp_d)
    return d

--------------------------------------------------------------------------------------------------------------------------------------------------------

#Qns 5 - Partition Modulo 3 - takes a list of integers and returns a dictionary that partitions the integers according to remainders of 3 with remainders as keys
def partition_modulo_three(t):
    k = [0, 1, 2]
    l0, l1, l2 = [],[],[]
    for x in t:
        if x % 3 == 0:
            l0.append(x)
        elif x % 3 == 1:
            l1.append(x)
        elif x % 3 == 2:
            l2.append(x)
    d = {k[0]: l0, k[1]: l1, k[2]: l2}
    return d

--------------------------------------------------------------------------------------------------------------------------------------------------------

#Qns 6 - Transmogrification Spell - has no paramters but takes an integer(denotes no. letters) then that many inputs with spaces so that a letter translates to 
                                    another letter for eg, "a g" a translates to g, then inputs a word and returns the translated word.
def transmogrify():
    n, count, t_from, t_to = int(input()), 0, [],  []
    while count < n:
        s = input()
        t_from.append(s[0]), t_to.append(s[2])
        count += 1
    word = input()
    d = {}
    for x in range(len(t_from)):
        temp_d = {t_from[x]:t_to[x]}
        d.update(temp_d)
    string = str()
    for x in word:
        val = d.get(x)
        string = string + val    
    return string
