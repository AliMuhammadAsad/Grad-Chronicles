#Qns 1 - Cup pattern (pyramid but tip facing downwards)

n = int(input())
s = n

def initial_space(x):
    return " "*x

def cup(n):
    if n <= 0:
        pass
    else:
        print(initial_space(s-n) + "* "*n)
        cup(n-1)
        # while n > 0:
        #     print(spaces(space) + "* "*n)
        #     n -= 1
        #     space += 1
cup(n)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Qns 2 - Hat pattern (pyramid with tip facing upwards)

n = int(input())
s = n

def initial_space(space):
    return " "*space

def count(s,n):
    return s-n

def hat(n):
    if n <= 0:
        pass
    elif n > 0:
        print(initial_space(n-1) + "* "*count(s,n-1))
        hat(n-1)
        
    # for j in range(1,n+1): 
    #     for k in range(n-j+1,1,-1): 
    #         print(" ", end='') 
    #     print("* " * j)
hat(n)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Qns 3 - Guessing Game using recursions - 5 tries

secret_number, n = int(input()), 1

def guessing_game(secret_number, n):
    user_input = int(input())
    if n == 5:
        if user_input == secret_number:
            print(f"Attempt number {n}\nCongratulations, you won! You guessed the secret number {secret_number} in {n} guesses.")
        else:
            print(f"Attempt number {n}\nSorry, you lose! Too many wrong guesses.")
    elif user_input > secret_number:
        print(f"Attempt number {n}\nTry again! Your guess is too high.")
        guessing_game(secret_number,n+1)
    elif user_input < secret_number:
        print(f"Attempt number {n}\nTry again! Your guess is too low.")
        guessing_game(secret_number, n+1)
    elif user_input == secret_number:
        print(f"Attempt number {n}\nCongratulations, you won! You guessed the secret number {secret_number} in {n} guesses.")
        
            
        
guessing_game(secret_number, 1)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Qns 4 - Greatest Common Divisor using recursion

a, b = int(input()), int(input())
def gcd(a,b):
    if a == 0:
        return b
    elif b == 0:
        return a
    else:
        return gcd(b,a%b)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Qns 5 - Generatus Emailus - generates an email id using initials of first and last name and assigns ids based on order of name entered (Waqar Saleem Dumbledore wala)

n = int(input())

def i_ids(name):
    name = name.lower()
    name_lst = name.split()
    name_id = name_lst[0][0] + name_lst[-1][0]
    return name_id

def generate_ids(n):
    for x in range(0,n):
        ids = ""
        name = input()
        inits = i_ids(name)
        if x <= 9:
            ids = inits + "0000" + str(x) + "@st.hu.edu.pk"
        elif 10 <= x <= 99:
            ids = inits + "000" + str(x) + "@st.hu.edu.pk"
        elif 100 <= x <= 999:
            ids = inits + "00" + str(x) + "@st.hu.edu.pk"
        elif 1000 <= x <= 9999:
            ids = inits + "0" + str(x) + "@st.hu.edu.pk"
        else:
            ids = inits + str(x) + "@st.hu.edu.pk"
        print(ids)
    
generate_ids(n)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Qns 6 - A Game of Thrones (encryption and decryption wala question)

