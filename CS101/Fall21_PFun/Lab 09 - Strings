#Qns 2 - Recursively Slow Conceal
def slow_conceal(s):
    if s == '':
        return ''
    else:
        print(s)
        if len(s)==0:
            pass
        else:
            slow_conceal(s[:len(s)-1:])    
---------------------------------------------------------------------------------------

#Qns 3 - Third or Fifth
def third_or_fifth(s):
    result = ''
    index = 0
    while index < len(s):
        letter = s[index]
        if ((index+1) % 3 == 0) or ((index+1) % 5 == 0):
            result = result + letter
        index = index + 1
    return result

---------------------------------------------------------------------------------------

#Qns 5 - Stretch a String
def stretch(s):
    c = 1
    string = str()
    for x in s:
        string = string + str(x*c)
        c = c + 1
    return string
    
---------------------------------------------------------------------------------------

#Qns 6 - Split Email Address
def split_email(email):
    #write your code here
    # name = email.split('@')[0]
    # domain = email.split('@')[1]
    # print(f"username: {name}\ndomain: {domain}")
    pos = email.find("@")
    name = str()
    domain = str()
    for x in range(pos):
        name = name + email[x]
    for x in range(pos+1, len(email)):
        domain = domain + email[x]
    print(f"username: {name}\ndomain: {domain}")
    
-----------------------------------------------------------------------------------------

#Qns 7 - Rotate a String
def rotate(s, n):
    n = n % len(s)
    s1 = s[0:n]
    s2 = s[n:]
    # print(n)
    return (s2 + s1)
    
-----------------------------------------------------------------------------------------

#Qns 9 - Is it a Palindrome
def is_palindrome(s):
    if s == '':
        return ''
    else:
        ulta_string = s[::-1]
        # print(ulta_string)
        if ulta_string == s:
            return True
        else:
            return False
 
-----------------------------------------------------------------------------------------

#Qns 10 - Intersection - checking whether a letter exists in both strings or not and then removing the duplicates 
s1, s2 = input(), input()
def common(s1, s2):
    string = str()
    for x in s1:
        if x in s2:
            string = string + x
        else:
            pass
    string = "".join(dict.fromkeys(string))
    return string

-----------------------------------------------------------------------------------------

#Qns 13 - Pattern 1 : 1, 1 2, 1 2 3, 1 2 3 4, 1 2 3 4 5, is tarha se but har iteration in new line
n = int(input())
def pattern(n):
    for x in range(1,n+1):
        for y in range(1,x+1):
            print(y, end = ' ')
        print()

------------------------------------------------------------------------------------------

#Qns 14 - Pattern 2 : if n = 5, 0 1 2 3 4 5, 0 1 2 3 4, 0 1 2 3, 0 1 2, 0 1,  is tarha and each iteration in new line
n = int(input())
def pattern(n):
    for x in range(n,0,-1):
        for y in range(0,x+1):
            print(y, end = ' ')
        print()

-------------------------------------------------------------------------------------------

#Qns 15 - Pattern 3 : 1, 2 3 4, 5 6 7 8 9, 10 11 12 13 14 15 16, 17 18 19 20 21 22 23 24 25 is tarha but in new lines
n = int(input())

def pattern(n):
    num = 1
    count = 2
    for x in range(n):
        for y in range(1, count):
            print(num, end = " ")
            num += 1
        print()
        count += 2
        
-------------------------------------------------------------------------------------------
