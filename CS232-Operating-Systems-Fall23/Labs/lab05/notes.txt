# !/bin/bash
# As mentioned above the path/dir and configs, this defines the variables to specify the path to the device, the mount point, and the devlabel configuration file.
# The mount point is a directory where the usb can be attached to or mounted to make its contents accessible to the OS
# The devlabel is used to provide consistent device names for removable storage devices.
SYMLINKDEV=/dev/diskonkey
MOUNTPOINT=/mnt/diskonkey
DEVLABEL=/sbin/devlabel
DEVLABELCONFIG=/etc/sysconfig/devlabel
IAM=$0

##
# Functions lifted near-verbatim from usb-mount code.
#
# -------------------------------------------------------------------------------------------------------------- #
# This function is used to find the attached USB storage devices
# it finds in /proc/scsi/ (scsi devices related to USB in this). It finds all files that have usb-storage in them (type -f means file) and then greps for the line that says "Attached: Yes" in the file. xargs is used to execute each file found as an argument to the grep command.  
function allAttachedScsiUsb {
  find /proc/scsi/ -path '/proc/scsi/usb-storage*' -type f |
  xargs grep -l 'Attached: Yes'
}

# -------------------------------------------------------------------------------------------------------------- #
# This function is used to determine the corresponding scsi device
# It takes as parameter an scsi device path, where echo $1 outputs the input path, and awk -F  is used to split the input path into fields (using field separator option -F) either using a hyphen or a forwards slash as the field seperator. Then through n=$(NF-1), it extracts the specific device, (NF is a special var in awk representing the number of fields) and it extracts for all but the last field (NF-1).
# Then in print, substr() extracts a single character (as specified by 1) from the string "abcdefghijklmnopqrstuvwxyz" at the position specified by n+1, where n is the extracted device number. This is then concatenated with /dev/sd to give the scsi device path.  
function scsiDevFromScsiUsb {
  echo $1 | awk -F"[-/]" '{ n=$(NF-1);
  print "/dev/sd" substr("abcdefghijklmnopqrstuvwxyz", n+1, 1) }'
}

# -------------------------------------------------------------------------------------------------------------- #

# Check if the "ACTION" env var is set to add, and if the device exists. These vars are used to determine the action to be taken and the device being acted upon - typically set by the system when the USB device is attached
# Action contains info about the action that triggered the script. Whether USB added or removed
# DEVICE represents path of the device that triggered the script 
if [ "${ACTION}" = "add" ] && [ -f "${DEVICE}" ]; then 
    ##
    # lifted from usbcam code.
    #
    # -------------------------------------------------------------------------------------------------------------- #
    # This block checks for the existence of console lock files (/var/run/console.lock and /var/lock/console.lock) and assigns the content of the lock file to the CONSOLEOWNER variable. These lock files are used to determine the owner of the console.
    # Console lock files indicate which user has control over the system console
    # Lock files are used to control access to resources or prevent conflicts in multi-user or multi-process environments
    if [ -f /var/run/console.lock ]; then #Check if a file name console.lock exists or not (-f to check if it is a file)
        CONSOLEOWNER=`cat /var/run/console.lock` #then contents are read using cat command and assigned to CONSOLEOWNER variable (typically the username of the user who has control over the console)
    elif [ -f /var/lock/console.lock ]; then #Check in /var/lock/ if a file name console.lock exists or not (-f to check if it is a file) - basically up one level
        CONSOLEOWNER=`cat /var/lock/console.lock` #then contents are read using cat command and assigned to CONSOLEOWNER variable (typically the username of the user who has control over the console)
    else #if neither happens, then console owner is set to an emtpty value - no specific console owner
        CONSOLEOWNER=
    fi

    # We loop over each attached USB storage device and mount it. 
    for procEntry in $(allAttachedScsiUsb); do
        scsiDev=$(scsiDevFromScsiUsb $procEntry) # calls the scsiDevFromScsiUsb function to convert a SCSI device entry into a corresponding /dev/sdX device path for each entry.
        
        #  Some bug with usb-storage?
        #  Partitions are not in /proc/partitions until they are accessed
        #+ somehow.
        /sbin/fdisk -l $scsiDev >/dev/null  #Checks the partition information of scsi using fdisk to ensure it is recognized. The >/dev/null part discards the standard output, so only error messages (if any) are displayed.
        
        ##
        #  Most devices have partitioning info, so the data would be on
        #+ /dev/sd?1. However, some stupider ones don't have any partitioning
        #+ and use the entire device for data storage. This tries to
        #+ guess semi-intelligently if we have a /dev/sd?1 and if not, then
        #+ it uses the entire device and hopes for the better.
        #
        # Checks whether device has partitions or not
        # -q option stands for "quiet" and tells grep to operate silently (i.e. do not display any output). Then append number 1 to the end of the variable,  
        if grep -q `basename $scsiDev`1 /proc/partitions; then
            part="$scsiDev""1"
        else
            part=$scsiDev
        fi
        ##
        #  Change ownership of the partition to the console user so they can
        #+ mount it.
        #
        # Check whether the COnsoleowner variable is empty or not. If not, then change the ownership of the partition to the console user so they can mount it.
        # -z is a test operator used to check if a given string is empty
        if [ ! -z "$CONSOLEOWNER" ]; then
            chown $CONSOLEOWNER:disk $part
        fi
        ##
        # This checks if we already have this UUID defined with devlabel.
        # If not, it then adds the device to the list.
        #
        
        # printid is used to print the label id for a given device. -d is used to specify the device for which we want to retrieve the label id
        prodid=`$DEVLABEL printid -d $part`
        if ! grep -q $prodid $DEVLABELCONFIG; then #if this is false, -q stands for quiet and tells grep to operate silently (i.e. do not display any output)
            # cross our fingers and hope it works
            $DEVLABEL add -d $part -s $SYMLINKDEV 2>/dev/null #add the device label using 'add' to the device through -d from the source using option -s
        fi
        #
        # Check if the mount point exists and create if it doesn't.
        #
        # Checks if the mountpoint directory exists or not. -e is used to check if a file or dir exists.
        if [ ! -e $MOUNTPOINT ]; then
            mkdir -p $MOUNTPOINT #if not exists, then make the directory, -p is used to make parent directories as needed - so entire directory path
        fi
        ##
        # Take care of /etc/fstab so mounting is easy.
        #

        if ! grep -q "^$SYMLINKDEV" /etc/fstab; then #Check if found or not, -q for quiet mode for grep
            # Add an fstab entry
            #here -e is used to enable interpretation of backslash escapes, in this case to format the string output 
            echo -e \ 
                "$SYMLINKDEV\t\t$MOUNTPOINT\t\tauto\tnoauto,owner,kudzu 0 0" \
                >> /etc/fstab
                # Append the echoed string to the end of the fstab file
        fi
    done

    if [ ! -z "$REMOVER" ]; then #CHeck if REMOVER variable is empty or not using -z which is a test operator used to check if a given string is empty
        ##
        # Make sure this script is triggered on device removal.
        #
        mkdir -p `dirname $REMOVER` #if it is not empty, then make the directory including the parent directories as needed using -p. dirname is used to extract the directory portion of the path stored in REMOVER
        ln -s $IAM $REMOVER #ln is used to create links between files and directories , -s specifies that a symbolic link (soft link) is to be created
    fi

elif [ "${ACTION}" = "remove" ]; then
    ##
    # If the device is mounted, unmount it cleanly.
    #
    if grep -q "$MOUNTPOINT" /etc/mtab; then
        # unmount cleanly
        # use unmount to unmount the filesystems. -l specifies lazy unmount, which allows unmounting even if device is busy
        umount -l $MOUNTPOINT
    fi
    ##
    # Remove it from /etc/fstab if it's there.
    #
    if grep -q "^$SYMLINKDEV" /etc/fstab; then
        # if symbolic link device is found in fstab, then remove it
        # -v is used to invert the matching behaviour of grep, it selects lines that do not match the pattern, and are included in the output. 
        grep -v "^$SYMLINKDEV" /etc/fstab > /etc/.fstab.new
        # this command forcefully (-f option) renames the files, so that the new file name is the same as the old file name.
        mv -f /etc/.fstab.new /etc/fstab
    fi
fi

exit 0